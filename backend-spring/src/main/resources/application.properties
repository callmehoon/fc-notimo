# =========================================
# 스프링 애플리케이션 기본 정보
# =========================================
# 애플리케이션의 이름을 지정합니다.
spring.application.name=notimo

# 서버 포트 설정
server.port=8080

# =========================================
# 가상 스레드 (Project Loom) 설정
# =========================================
# JDK 21+ 에서 사용 가능, 요청 처리 성능 향상을 위해 가상 스레드를 활성화합니다.
spring.threads.virtual.enabled=true

# =========================================
# 1. 데이터베이스 연결(DataSource) 설정
# =========================================
# 연결할 데이터베이스의 URL입니다. (MySQL, useSSL=false, 서버시간대=서울, 문자셋=UTF-8)
spring.datasource.url=jdbc:mysql://localhost:3307/notimo?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
# 데이터베이스 접속에 사용할 사용자 이름입니다.
spring.datasource.username=admin
# 데이터베이스 접속 비밀번호입니다. (.env 또는 환경변수에서 값을 가져옵니다)
spring.datasource.password=${DB_PASSWORD}
# 사용할 JDBC 드라이버 클래스를 지정합니다. (MySQL 8+)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# =========================================
# 2. JPA & Hibernate 설정
# =========================================
# 애플리케이션 시작 시, 엔티티와 DB 테이블을 비교하여 자동으로 스키마를 변경할지 설정합니다.
# - update: 변경된 부분만 반영합니다. (개발 시 유용)
# - none: 아무것도 하지 않습니다. (운영 환경 권장)
# - validate: 엔티티와 테이블이 일치하는지만 검증합니다.
# - create: 기존 테이블을 삭제하고 새로 만듭니다. (테스트 시 유용)
spring.jpa.hibernate.ddl-auto=update
# JPA가 실행하는 SQL 쿼리를 로그에 출력할지 여부를 설정합니다. (개발 시 디버깅용)
spring.jpa.show-sql=true
# 로그에 출력되는 SQL 쿼리를 보기 좋게 정렬(pretty-format)합니다.
spring.jpa.properties.hibernate.format_sql=true
# 사용하는 데이터베이스에 맞는 SQL 방언(Dialect)을 지정합니다.
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
# H2 방언 (테스트용 - Redis/이메일 테스트)
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# OSIV(Open Session In View) 설정. DB 커넥션 자원의 낭비를 막고 시스템 안정성을 높이기 위해 false로 설정합니다.
# false로 설정 시, 모든 DB 관련 작업(지연 로딩 포함)은 트랜잭션이 적용된 서비스 계층에서 완료해야 합니다.
spring.jpa.open-in-view=false

# =========================================
# HTTP 서블릿 인코딩 설정 (강화)
# 웹 요청 및 응답의 문자 인코딩을 UTF-8로 통일하여 한글 깨짐을 방지합니다.
# =========================================
# HTTP 통신의 기본 문자 인코딩을 UTF-8로 지정합니다.
server.servlet.encoding.charset=UTF-8
# 위에서 설정한 인코딩 필터를 활성화합니다. (기본값이 true)
server.servlet.encoding.enabled=true
# 요청(Request)과 응답(Response) 모두에 항상 인코딩을 강제로 적용할지 여부를 설정합니다.
server.servlet.encoding.force=true
# 요청(Request)에만 강제로 인코딩을 적용할지 여부입니다. (force=true 이면 이 설정은 사실상 무시됩니다)
server.servlet.encoding.force-request=true
# 응답(Response)에만 강제로 인코딩을 적용할지 여부입니다. (force=true 이면 이 설정은 사실상 무시됩니다)
server.servlet.encoding.force-response=true

# =========================================
# 스프링 애플리케이션 추가 인코딩 설정
# =========================================
# 다국어 지원(i18n)을 위한 메시지 파일(예: messages.properties)의 인코딩을 UTF-8로 설정합니다.
spring.messages.encoding=UTF-8
# 스프링 부트 시작 시 터미널에 표시되는 배너의 문자를 UTF-8로 설정합니다.
spring.banner.charset=UTF-8

# =========================================
# JWT (JSON Web Token) 설정
# =========================================
# JWT 토큰을 서명하고 검증하는 데 사용할 비밀 키입니다. (.env 파일에서 환경변수로 관리)
jwt.secret.key=${JWT_SECRET_KEY}

# =========================================
# Redis 설정
# =========================================
# Redis 서버의 호스트 주소입니다. (로컬 개발 시 보통 localhost)
spring.data.redis.host=localhost
# Redis 서버의 포트 번호입니다. (기본값 6379)
spring.data.redis.port=6379

# =========================================
# Spring Mail (이메일 발송) 설정
# =========================================
# 사용할 SMTP 서버의 호스트 주소입니다.
spring.mail.host=smtp.gmail.com
# SMTP 서버의 포트 번호입니다.
spring.mail.port=587
# 이메일 발송에 사용할 계정의 사용자 이름입니다.
spring.mail.username=kernelteam2jdi@gmail.com
# 해당 이메일 계정의 앱 비밀번호입니다. (.env 파일에서 환경변수로 관리)
spring.mail.password=${MAIL_PASSWORD}
# SMTP 서버 인증을 사용할지 여부입니다.
spring.mail.properties.mail.smtp.auth=true
# TLS(전송 계층 보안) 연결을 사용할지 여부입니다.
spring.mail.properties.mail.smtp.starttls.enable=true
# 이메일 발송 실패 시 재시도 및 타임아웃 설정 (안정성 향상)
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=5000

# =========================================
# Rate Limiting 설정 (보안 강화)
# =========================================
# 이메일 인증 코드 발송 제한 (동일 IP 기준: 5분간 3회)
rate-limit.email-send.requests-per-window=3
rate-limit.email-send.window-duration-minutes=5
# 이메일 인증 코드 검증 제한 (동일 이메일 기준: 10분간 5회)
rate-limit.email-verify.requests-per-window=5
rate-limit.email-verify.window-duration-minutes=10
# 회원가입 제한 (동일 IP 기준: 1시간간 10회)
rate-limit.signup.requests-per-window=10
rate-limit.signup.window-duration-minutes=60
# 로그인 시도 제한 (동일 IP 기준: 15분간 5회)
rate-limit.login.requests-per-window=5
rate-limit.login.window-duration-minutes=15
# 토큰 갱신 제한 (동일 IP 기준: 5분간 10회)
rate-limit.refresh-token.requests-per-window=10
rate-limit.refresh-token.window-duration-minutes=5

# =========================================
# OAuth2 소셜 로그인 설정
# =========================================
# Google OAuth2 설정
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# =========================================
# API 전역 경로 접두사 설정
# =========================================
# 모든 REST API 엔드포인트 경로 앞에 /api 접두사를 추가합니다.
server.servlet.context-path=/api

# =========================================
# 애플리케이션 환경 설정
# =========================================
# 개발환경 여부 (true: 개발환경, false: 운영환경)
# 개발환경에서는 로컬 IP(127.0.0.1, localhost 등)를 허용합니다.
app.environment.development=true

# Swagger 서버 URL 설정
app.swagger.server-url=http://localhost:8080/api/

# =========================================
# CORS 보안 설정
# =========================================
# 허용할 Origin 도메인 목록 (쉼표로 구분)
# 개발환경: 로컬 개발 서버 주소
# 프로덕션: 실제 프론트엔드 도메인으로 변경 필요
app.cors.allowed-origins=http://localhost:3000,http://127.0.0.1:3000,http://localhost:8080,http://127.0.0.1:8080,http://localhost:8000,http://127.0.0.1:8000
# =========================================
# Swagger/OpenAPI 설정
# =========================================
# 커스텀 Swagger 정보 (SwaggerConfig에서 사용)
app.swagger.title=notimo API
app.swagger.description=notimo 애플리케이션의 REST API 문서
app.swagger.version=v1.0
app.swagger.contact.name=notimo Development Team
app.swagger.contact.email=dev@notimo.com

# Swagger UI 경로: /api/swagger-ui/index.html
springdoc.swagger-ui.path=/swagger-ui.html
# API 문서 경로: /api/v3/api-docs
springdoc.api-docs.path=/v3/api-docs
# Swagger UI에서 시도(Try it out) 기능 활성화
springdoc.swagger-ui.try-it-out-enabled=true
# 태그를 알파벳 순으로 정렬
springdoc.swagger-ui.tags-sorter=alpha
# API 연산을 알파벳 순으로 정렬
springdoc.swagger-ui.operations-sorter=alpha
# 기본적으로 모든 엔드포인트 표시
springdoc.swagger-ui.display-request-duration=true
# 응답 시간 표시
springdoc.swagger-ui.show-extensions=true

# =========================================
# 인증 관련 설정
# =========================================
# 보안 설정
auth.security.min-response-time-ms=200
auth.security.dummy-hash=$2a$10$dummy.hash.to.prevent.timing.attacks.for.security.purposes
auth.security.max-login-attempts=5
auth.security.account-lock-duration-minutes=30

# 토큰 설정
auth.token.access-token-validity-seconds=900
auth.token.refresh-token-validity-seconds=604800
auth.token.refresh-threshold-seconds=300

# Redis 키 설정
auth.redis.refresh-token-key-prefix=refresh_token:
auth.redis.user-tokens-key-prefix=user_tokens:
auth.redis.email-verification-key-prefix=email_verification:
auth.redis.jwt-blacklist-key-prefix=jwt:blacklist:

# 에러 메시지 설정
auth.messages.invalid-credentials=이메일 또는 비밀번호가 일치하지 않습니다.
auth.messages.invalid-refresh-token=유효하지 않은 리프레시 토큰입니다.
auth.messages.expired-refresh-token=만료되었거나 유효하지 않은 리프레시 토큰입니다.
auth.messages.user-not-found=사용자를 찾을 수 없습니다.
auth.messages.invalid-token-info=토큰 정보가 유효하지 않습니다.
auth.messages.account-locked=너무 많은 로그인 시도로 인해 계정이 일시적으로 잠겼습니다.
auth.messages.verification-code-expired=인증 코드가 만료되었거나 유효하지 않습니다.

# OAuth2 설정
auth.oauth2.temp-info-expiry-minutes=15
auth.oauth2.max-extension-minutes=30
auth.oauth2.temp-key-prefix=oauth2_temp:
